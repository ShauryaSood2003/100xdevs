/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const users=[
  { 
    "id":1,
    "title": "Buy groceries", 
    "completed": false, 
    "description": "I should buy groceries" 
  },
  { 
    "id":2,
    "title": "Buy Toys", 
    "completed": true, 
    "description": "I should buy Toys" 
  }
  
];
  const express = require('express');
  const bodyParser = require('body-parser');
  
  const app = express();
  
  app.use(bodyParser.json());

  app.get("/todos",(req,res)=>{
    res.status(200).json(users);
  });
  app.get("/todos/:id",(req,res)=>{
    const id=req.params.id;
    const obj=users.filter((item)=>item.id==id);
    if(obj.length!=0){
      res.status(200).json(obj);
    }else{
      res.status(404).json({"msg":`Cannot find any message with id: ${id}`})
    }
  });

  app.post("/todos",(req,res)=>{
    const obj=req.body;
    let currId=1;
    if(users.length!=0) currId=users[users.length-1].id+1;
    const newObj={
      "id":currId,
      "title": obj.title, 
      "completed": obj.completed, 
      "description": obj.description
    };
    users.push(newObj);
    res.status(200).json({"msg":"Task Added successfully"});
  });
  app.put("/todos/:id",(req,res)=>{
    const id=req.params.id;
    const obj=req.body;
    const index=users.findIndex((obj)=>obj.id==id);
    if(index!=-1){
      users[index].title=obj.title;
      users[index].description=obj.description;
      res.status(200).json({"msg":"Updated the title and description successfully"});
    }else{
      res.status(404).json({"msg":"Not Found"});
    }
  });
  app.delete("/todos/:id",(req,res)=>{
    const id=req.params.id;
    const index=users.findIndex((obj)=>obj.id==id);
    if(index==-1){
      res.status(404).json({"msg":"Not Found"});
    }else{
      const obj=users.splice(index,1);
      res.status(200).json({"msg":"item removed Successfully"});
    }
  });

  app.use((req,res,next)=>{
    res.status(404).send();
  })
  app.listen(3000,()=>{console.log("Server running on port 3000");});
  module.exports = app;